diff -Nur GEMMA-0.98.3/gcc/libquadmath/configure GEMMA-0.98.3_gcc/gcc/libquadmath/configure
--- GEMMA-0.98.3/gcc/libquadmath/configure	2023-07-27 16:17:14.000000000 +0800
+++ GEMMA-0.98.3_gcc/gcc/libquadmath/configure	2024-04-11 14:12:28.748476030 +0800
@@ -633,6 +633,8 @@
 LTLIBOBJS
 LIBOBJS
 get_gcc_base_ver
+ARCH_AARCH64_FALSE
+ARCH_AARCH64_TRUE
 GENINSRC_FALSE
 GENINSRC_TRUE
 XCFLAGS
@@ -10830,7 +10832,7 @@
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 10833 "configure"
+#line 10837 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -10936,7 +10938,7 @@
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 10939 "configure"
+#line 10943 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -12728,7 +12730,10 @@
   if test x$gcc_no_link = xyes; then
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-
+    #if defined(__aarch64__)
+    typedef long double __float128;
+    #define __builtin_huge_valq() (__extension__ 0x1.0p32767Q)
+    #endif
     #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)
     typedef _Complex float __attribute__((mode(TC))) __complex128;
     #else
@@ -12779,7 +12784,10 @@
 fi
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-
+    #if defined(__aarch64__)
+    typedef long double __float128;
+    #define __builtin_huge_valq() (__extension__ 0x1.0p32767Q)
+    #endif
     #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)
     typedef _Complex float __attribute__((mode(TC))) __complex128;
     #else
@@ -13266,7 +13274,13 @@
   GENINSRC_FALSE=
 fi
 
-
+ if expr "$target_cpu" : "aarch64.*" > /dev/null; then
+  ARCH_AARCH64_TRUE=
+  ARCH_AARCH64_FALSE='#'
+else
+  ARCH_AARCH64_TRUE='#'
+  ARCH_AARCH64_FALSE=
+fi
 # Determine what GCC version number to use in filesystem paths.
 
   get_gcc_base_ver="cat"
@@ -13449,7 +13463,10 @@
   as_fn_error $? "conditional \"GENINSRC\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
-
+if test -z "${ARCH_AARCH64_TRUE}" && test -z "${ARCH_AARCH64_FALSE}"; then
+  as_fn_error $? "conditional \"ARCH_AARCH64\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 : "${CONFIG_STATUS=./config.status}"
 ac_write_fail=0
 ac_clean_files_save=$ac_clean_files
diff -Nur GEMMA-0.98.3/gcc/libquadmath/configure.ac GEMMA-0.98.3_gcc/gcc/libquadmath/configure.ac
--- GEMMA-0.98.3/gcc/libquadmath/configure.ac	2023-07-27 16:13:08.000000000 +0800
+++ GEMMA-0.98.3_gcc/gcc/libquadmath/configure.ac	2024-04-11 14:12:28.748476030 +0800
@@ -218,6 +218,10 @@
 
 AC_CACHE_CHECK([whether __float128 is supported], [libquad_cv_have_float128],
   [GCC_TRY_COMPILE_OR_LINK([
+    #if defined(__aarch64__)
+    typedef long double __float128;
+    #define __builtin_huge_valq() (__extension__ 0x1.0p32767Q)
+    #endif
     #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)
     typedef _Complex float __attribute__((mode(TC))) __complex128;
     #else
@@ -393,7 +397,8 @@
 [enable_generated_files_in_srcdir=no])
 AC_MSG_RESULT($enable_generated_files_in_srcdir)
 AM_CONDITIONAL(GENINSRC, test "$enable_generated_files_in_srcdir" = yes)
-
+AM_CONDITIONAL(ARCH_AARCH64,
+               [expr "$target_cpu" : "aarch64.*" > /dev/null])
 # Determine what GCC version number to use in filesystem paths.
 GCC_BASE_VER
 
diff -Nur GEMMA-0.98.3/gcc/libquadmath/Makefile.am GEMMA-0.98.3_gcc/gcc/libquadmath/Makefile.am
--- GEMMA-0.98.3/gcc/libquadmath/Makefile.am	2023-07-27 16:13:08.000000000 +0800
+++ GEMMA-0.98.3_gcc/gcc/libquadmath/Makefile.am	2024-04-11 14:12:28.748476030 +0800
@@ -1,7 +1,9 @@
 ## Process this file with automake to produce Makefile.in
 
 AUTOMAKE_OPTIONS = foreign info-in-builddir
-
+if ARCH_AARCH64
+DEFS += -D__float128="long double"
+endif
 ## Skip over everything if the quadlib is not available:
 if BUILD_LIBQUADMATH
 ACLOCAL_AMFLAGS = -I .. -I ../config
diff -Nur GEMMA-0.98.3/gcc/libquadmath/Makefile.in GEMMA-0.98.3_gcc/gcc/libquadmath/Makefile.in
--- GEMMA-0.98.3/gcc/libquadmath/Makefile.in	2023-07-27 16:17:14.000000000 +0800
+++ GEMMA-0.98.3_gcc/gcc/libquadmath/Makefile.in	2024-04-11 14:13:10.288476030 +0800
@@ -90,6 +90,7 @@
 build_triplet = @build@
 host_triplet = @host@
 target_triplet = @target@
+@ARCH_AARCH64_TRUE@am__append_1 = -D__float128="long double"
 @BUILD_LIBQUADMATH_FALSE@libquadmath_la_DEPENDENCIES =
 subdir = .
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
@@ -337,7 +338,7 @@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
-DEFS = @DEFS@
+DEFS = @DEFS@ $(am__append_1)
 DEPDIR = @DEPDIR@
 DSYMUTIL = @DSYMUTIL@
 DUMPBIN = @DUMPBIN@
diff -Nur GEMMA-0.98.3/gcc/libquadmath/quadmath.h GEMMA-0.98.3_gcc/gcc/libquadmath/quadmath.h
--- GEMMA-0.98.3/gcc/libquadmath/quadmath.h	2023-07-27 16:13:08.000000000 +0800
+++ GEMMA-0.98.3_gcc/gcc/libquadmath/quadmath.h	2024-04-11 14:12:28.748476030 +0800
@@ -26,7 +26,11 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-
+#if defined(__aarch64__)
+#ifndef __float128
+typedef long double __float128;
+#endif
+#endif
 /* Define the complex type corresponding to __float128
    ("_Complex __float128" is not allowed) */
 #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)
@@ -160,11 +164,13 @@
 #define FLT128_MAX_10_EXP 4932
 
 
-#define HUGE_VALQ __builtin_huge_valq()
+#if defined(__aarch64__)
 /* The following alternative is valid, but brings the warning:
    (floating constant exceeds range of ‘__float128’)  */
-/* #define HUGE_VALQ (__extension__ 0x1.0p32767Q) */
-
+# define HUGE_VALQ (__extension__ 0x1.0p32767Q)
+#else
+# define HUGE_VALQ __builtin_huge_valq()
+#endif
 #define M_Eq		2.718281828459045235360287471352662498Q  /* e */
 #define M_LOG2Eq	1.442695040888963407359924681001892137Q  /* log_2 e */
 #define M_LOG10Eq	0.434294481903251827651128918916605082Q  /* log_10 e */
